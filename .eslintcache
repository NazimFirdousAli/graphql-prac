[{"D:\\Office\\graphql-prac\\src\\reportWebVitals.js":"1","D:\\Office\\graphql-prac\\src\\App.js":"2","D:\\Office\\graphql-prac\\src\\index.js":"3","D:\\Office\\graphql-prac\\src\\Components\\UserView.js":"4","D:\\Office\\graphql-prac\\src\\Components\\AddUser.js":"5","D:\\Office\\graphql-prac\\src\\Components\\UpdateUser.js":"6","D:\\Office\\graphql-prac\\src\\Components\\CRUDinOne.js":"7"},{"size":362,"mtime":1606123563871,"results":"8","hashOfConfig":"9"},{"size":424,"mtime":1611392606103,"results":"10","hashOfConfig":"9"},{"size":920,"mtime":1611393977124,"results":"11","hashOfConfig":"9"},{"size":1324,"mtime":1611384449901,"results":"12","hashOfConfig":"9"},{"size":660,"mtime":1611382474955,"results":"13","hashOfConfig":"9"},{"size":1092,"mtime":1611316445320,"results":"14","hashOfConfig":"9"},{"size":7309,"mtime":1611407683454,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jc283b",{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"D:\\Office\\graphql-prac\\src\\reportWebVitals.js",[],"D:\\Office\\graphql-prac\\src\\App.js",["38","39","40"],"import React from 'react';\nimport './App.css';\n\n// custom components\nimport UserView from './Components/UserView.js'\nimport AddUser from './Components/AddUser.js'\nimport UpdateUser from './Components/UpdateUser.js'\nimport CRUDinOne from './Components/CRUDinOne.js'\nfunction App() {\n  return (\n    <div>\n      {/* <AddUser/>\n      <UserView/>\n      <UpdateUser/> */}\n      <CRUDinOne/>\n\n    </div>\n  );\n}\n\nexport default App;","D:\\Office\\graphql-prac\\src\\index.js",["41"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { ApolloProvider,gql } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'http://192.168.100.5:3500/graphql',\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'no-cache'\n    },\n    query: {\n      fetchPolicy: 'no-cache'\n    },\n    mutate: {\n      fetchPolicy: \"no-cache\"\n    }\n  }\n});\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["42","43"],"D:\\Office\\graphql-prac\\src\\Components\\UserView.js",["44"],"import React from 'react'\r\nimport { useQuery, gql, useMutation } from '@apollo/client';\r\n\r\n\r\nconst ADDUSER = gql`\r\nmutation($name:String!) {\r\n    createUser(name:$name){\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst USERSVIEW = gql`\r\n  query {\r\n    users{\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETEUSER = gql`\r\n  mutation($id:Int!) {\r\n    deleteUser(id:$id){\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nfunction UserView() {\r\n  const { loading, error, data } = useQuery(USERSVIEW);\r\n  const [deleteUser] = useMutation(DELETEUSER, {\r\n    refetchQueries: [{ query: USERSVIEW }]\r\n  })\r\n\r\n  console.log(data);\r\n  const onDelete = (id) => {\r\n    deleteUser({ variables: { id } })\r\n  }\r\n  if (loading) return <p>loading</p>\r\n  if (error) return <p>Error :\\</p>\r\n  return (\r\n    \r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>User Id</th>\r\n          <th>Username</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {data.users.map(({ name, id }, i) => (\r\n          <tr key={i}>\r\n            <td>{id}</td>\r\n            <td>{name}</td>\r\n            <td>\r\n              <button>edit</button>\r\n              <button onClick={() => onDelete(id)}>delete</button>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\n\r\nexport default UserView\r\n","D:\\Office\\graphql-prac\\src\\Components\\AddUser.js",["45"],"import React from 'react'\r\nimport { gql,useMutation } from '@apollo/client';\r\n\r\nconst ADDUSER = gql`\r\nmutation($name:String!) {\r\n    createUser(name:$name){\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nfunction AddUser() {\r\n    let input;\r\n    const [createUser,{data}] = useMutation(ADDUSER)\r\n    return (\r\n        <div>\r\n        <form\r\n          onSubmit={e => {\r\n            e.preventDefault();\r\n            createUser({ variables: { name: input.value } });\r\n          }}\r\n        >\r\n          <input ref={node => { input = node;}}\r\n          />\r\n          <button type=\"submit\">Save</button>\r\n        </form>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default AddUser\r\n",["46","47"],"D:\\Office\\graphql-prac\\src\\Components\\UpdateUser.js",[],["48","49"],"D:\\Office\\graphql-prac\\src\\Components\\CRUDinOne.js",["50","51"],"import React, { useState, useEffect } from 'react'\r\nimport { useQuery, useLazyQuery, gql, useMutation } from '@apollo/client';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: '#F1D1B5'\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        BackgroundColor: '#F0F8FF',\r\n        height: '700px',\r\n        width: '700px',\r\n        margin: '5% 25%',\r\n        overflowY: 'auto'\r\n    },\r\n    textbox: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n\r\n        }\r\n    },\r\n    button: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            color: '#568EA6',\r\n            height: '10px',\r\n            width: '10px',\r\n        }\r\n    },\r\n    table: {\r\n        Width: '100%',\r\n    }\r\n\r\n}));\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: \"#305f72\",\r\n        color: theme.palette.common.white,\r\n        width: '700px'\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n            overflowX: 'auto',\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\n\r\n\r\n\r\nconst USERS = gql`\r\n  query {\r\n    users{\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\nconst ADDUSER = gql`\r\nmutation($name:String!) {\r\n    createUser(name:$name){\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETEUSER = gql`\r\n  mutation($id:Int!) {\r\n    deleteUser(id:$id){\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATEUSER = gql`\r\n    mutation($id: Int!, $name: String!){\r\n        updateUser(id:$id,name:$name){\r\n              id\r\n              name\r\n          }\r\n    }`;\r\n\r\n\r\n\r\nfunction CRUDinOne() {\r\n    const classes = useStyles();\r\n\r\n\r\n    const [user, setUser] = useState('');\r\n    const [userId, setUserId] = useState('');\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const handleChange = ({ target: { value } }) => setUser(value);\r\n\r\n    const [users, { loading, error, data }] = useLazyQuery(USERS);\r\n    const [updateUser] = useMutation(UPDATEUSER);\r\n    const [createUser] = useMutation(ADDUSER);\r\n    const [deleteUser] = useMutation(DELETEUSER);\r\n\r\n    useEffect(() => {\r\n        users();\r\n    }, [users]);\r\n\r\n    useEffect(() => {\r\n        console.log('data', data)\r\n    }, [data]);\r\n\r\n    function onSubmitHandler(ev) {\r\n        ev.preventDefault()\r\n        if (editMode) {\r\n            updateUser({ variables: { id: userId, name: user } }).then(() => {\r\n                setUser('');\r\n                setEditMode(false);\r\n                setUserId('');\r\n            })\r\n        }\r\n        else {\r\n            createUser({ variables: { name: user } }).then(() => setUser(''))\r\n        }\r\n        users();\r\n    }\r\n\r\n    function Update(id) {\r\n        const u = data.users.find((user) => user.id === id);\r\n        setUser(u.name);\r\n        setEditMode(true);\r\n        setUserId(id);\r\n    }\r\n    function Delete(id) {\r\n        deleteUser({ variables: { id } }).then(() => {\r\n            if (editMode) {\r\n                setUser('');\r\n                setEditMode(false);\r\n                setUserId('')\r\n            }\r\n        })\r\n        users();\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    <Paper className={classes.paper}>\r\n\r\n\r\n                        <h1 >WELCOME TO CRUD APPLCATION</h1>\r\n                        <form onSubmit={onSubmitHandler}>\r\n                            <div>\r\n                                <TextField className={classes.textbox} id=\"outlined-search\" label=\"Enter Username\" type=\"username\" variant=\"outlined\" value={user} onChange={handleChange} />\r\n                            &nbsp;&nbsp;\r\n                            <Button className={classes.button} type=\"submit\" variant=\"outlined\" >{editMode ? 'Edit' : 'Save'}</Button>\r\n                            </div>\r\n                        </form>\r\n                        <br /><br />\r\n                        <TableContainer component={Paper}>\r\n                            {!loading && data && Array.isArray(data.users) && (\r\n                                <Table className={classes.table} aria-label=\"customized table\">\r\n                                    <TableHead >\r\n                                        <TableRow >\r\n                                            <StyledTableCell>User-ID</StyledTableCell>\r\n                                            <StyledTableCell >Username</StyledTableCell>\r\n                                            <StyledTableCell  ></StyledTableCell>\r\n                                            <StyledTableCell ></StyledTableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {data.users.map(({ id, name }, i) => (\r\n                                            <StyledTableRow >\r\n                                                <StyledTableCell align=\"left\">{id}</StyledTableCell>\r\n                                                <StyledTableCell align=\"left\">{name}</StyledTableCell>\r\n                                                <StyledTableCell align=\"right\">\r\n                                                    <IconButton color='primary'>\r\n                                                        <EditIcon onClick={() => Update(id)}></EditIcon>\r\n                                                    </IconButton>\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell align=\"right\">\r\n                                                    <IconButton color='secondary'>\r\n                                                        <DeleteIcon onClick={() => Delete(id)}></DeleteIcon>\r\n                                                    </IconButton>\r\n                                                </StyledTableCell>\r\n                                            </StyledTableRow>\r\n                                        ))};\r\n\r\n                                </TableBody>\r\n                                </Table>\r\n                            )}\r\n                        </TableContainer>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid >\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CRUDinOne\r\n",{"ruleId":"52","severity":1,"message":"53","line":5,"column":8,"nodeType":"54","messageId":"55","endLine":5,"endColumn":16},{"ruleId":"52","severity":1,"message":"56","line":6,"column":8,"nodeType":"54","messageId":"55","endLine":6,"endColumn":15},{"ruleId":"52","severity":1,"message":"57","line":7,"column":8,"nodeType":"54","messageId":"55","endLine":7,"endColumn":18},{"ruleId":"52","severity":1,"message":"58","line":7,"column":25,"nodeType":"54","messageId":"55","endLine":7,"endColumn":28},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"52","severity":1,"message":"63","line":5,"column":7,"nodeType":"54","messageId":"55","endLine":5,"endColumn":14},{"ruleId":"52","severity":1,"message":"64","line":15,"column":24,"nodeType":"54","messageId":"55","endLine":15,"endColumn":28},{"ruleId":"59","replacedBy":"65"},{"ruleId":"61","replacedBy":"66"},{"ruleId":"59","replacedBy":"67"},{"ruleId":"61","replacedBy":"68"},{"ruleId":"52","severity":1,"message":"69","line":2,"column":10,"nodeType":"54","messageId":"55","endLine":2,"endColumn":18},{"ruleId":"52","severity":1,"message":"70","line":125,"column":30,"nodeType":"54","messageId":"55","endLine":125,"endColumn":35},"no-unused-vars","'UserView' is defined but never used.","Identifier","unusedVar","'AddUser' is defined but never used.","'UpdateUser' is defined but never used.","'gql' is defined but never used.","no-native-reassign",["71"],"no-negated-in-lhs",["72"],"'ADDUSER' is assigned a value but never used.","'data' is assigned a value but never used.",["71"],["72"],["71"],["72"],"'useQuery' is defined but never used.","'error' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]